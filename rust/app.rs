/* automatically generated by rust-bindgen 0.69.1 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct App {
    pub m_name: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_App() {
    const UNINIT: ::std::mem::MaybeUninit<App> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<App>(),
        8usize,
        concat!("Size of: ", stringify!(App))
    );
    assert_eq!(
        ::std::mem::align_of::<App>(),
        8usize,
        concat!("Alignment of ", stringify!(App))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(App),
            "::",
            stringify!(m_name)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN3App6lengthEv"]
    pub fn App_length(this: *mut App) -> ::std::os::raw::c_ulong;
}
impl App {
    #[inline]
    pub unsafe fn length(&mut self) -> ::std::os::raw::c_ulong {
        App_length(self)
    }
}
